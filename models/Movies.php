<?php

namespace app\models;

use Yii;
use yii\data\Pagination;

/**
 * This is the model class for table "movies".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $text
 * @property string $date
 * @property string $image
 * @property string $length
 * @property string $premiere
 * @property string $directors
 * @property string $writers
 * @property string $stars
 * @property string $movie
 * @property integer $viewed
 */
class Movies extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'movies';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'description', 'text', 'length', 'directors', 'writers', 'stars', 'premiere'], 'required', 'message' => 'Please, fill in all the fields'],
            [['title', 'text', 'description', 'premiere'], 'string'],
            [['date'], 'date', 'format'=>'php:Y-m-d'],
            [['date'], 'default', 'value'=> date('Y-m-d')],
            [['title'], 'string', 'max'=> 255],
            [['image'], 'file', 'extensions' => 'png, jpg,jpeg'],
            [['movie'], 'file', 'extensions' => 'mp4, ogg,webm'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'text' => 'Text',
            'date' => 'Date',
            'image' => 'Image',
            'length' => 'Length',
            'premiere' => 'Premiere(Date)',
            'directors' => 'Directors',
            'writers' => 'Writers',
            'stars' => 'Stars',
            'movie' => 'Movie',
            'viewed' => 'Viewed',
        ];
    }

    public function saveImage($filename) {
        $this->image = $filename;
        $this->save(false);
    }

    public function deleteImage() {
        $imageUploadModel = new MoviesImgUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function getImage()
    {
        return ($this->image) ? '/movies-images/' . $this->image : '/no-image.png';
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        $this->deleteMovie();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function saveMovie($filename) {
        $this->movie = $filename;
        $this->save(false);
    }

    public function deleteMovie() {
        $movieUploadModel = new MoviesUpload();
        $movieUploadModel->deleteCurrentMovie($this->movie);
    }

    public function getMovie()
    {
        return ($this->movie) ? '/movies/' . $this->movie : '/no-image.png';
    }

    public static function getAll($pageSize = 5) {
        $query = Movies::find();
        $count = $query->count();

        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        $movies = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        $data['movies'] = $movies;
        $data['pagination'] = $pagination;

        return $data;
    }

    public static function getMovieForSlider()
    {
        return Movies::find()->orderBy('id desc')->limit(3)->all();
    }

    public static function getLastMovie()
    {
        return Movies::find()->orderBy('id desc')->limit(2)->offset(3)->all();
    }

    public static function getLatestMovie()
    {
        return Movies::find()->orderBy('id desc')->limit(4)->offset(5)->all();
    }

    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }


    public function viewedCounter()
    {
        $this->viewed += 1;
        return $this->save(false);
    }
}
